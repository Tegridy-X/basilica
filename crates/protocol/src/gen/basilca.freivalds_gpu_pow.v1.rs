// This file is @generated by prost-build.
/// Initial challenge parameters for Freivalds protocol
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FreivaldsChallenge {
    /// Unique session ID for tracking multi-round protocol
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    /// Matrix dimension N for N x N matrices
    #[prost(uint32, tag = "2")]
    pub n: u32,
    /// Master seed for deterministic matrix generation (16 bytes)
    #[prost(bytes = "vec", tag = "3")]
    pub master_seed: ::prost::alloc::vec::Vec<u8>,
    /// Challenge timestamp
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Expected GPU configuration (for symmetric verification fallback)
    #[prost(uint32, tag = "5")]
    pub expected_gpu_count: u32,
}
/// Commitment response from miner after computing C = A × B
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommitmentResponse {
    /// Session ID this commitment belongs to
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    /// Merkle root of matrix C rows (32 bytes)
    #[prost(bytes = "vec", tag = "2")]
    pub merkle_root: ::prost::alloc::vec::Vec<u8>,
    /// Number of rows in matrix C
    #[prost(uint32, tag = "3")]
    pub row_count: u32,
    /// Execution metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<ExecutionMetadata>,
    /// Commitment timestamp
    #[prost(message, optional, tag = "5")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// Verification request from validator with challenge vector
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FreivaldsVerification {
    /// Session ID for this verification
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    /// Random challenge vector r (base64 encoded float array)
    #[prost(bytes = "vec", tag = "2")]
    pub challenge_vector: ::prost::alloc::vec::Vec<u8>,
    /// Indices of rows to spot-check
    #[prost(uint32, repeated, tag = "3")]
    pub spot_check_rows: ::prost::alloc::vec::Vec<u32>,
    /// Verification timestamp
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// Row proof for spot-checking
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RowProof {
    /// Row index in matrix C
    #[prost(uint32, tag = "1")]
    pub row_idx: u32,
    /// Row data (base64 encoded float array)
    #[prost(bytes = "vec", tag = "2")]
    pub row_data: ::prost::alloc::vec::Vec<u8>,
    /// Merkle proof path (list of 32-byte hashes)
    #[prost(bytes = "vec", repeated, tag = "3")]
    pub merkle_path: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
/// Response containing C·r and row proofs
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FreivaldsResponse {
    /// Session ID for this response
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    /// C·r result (base64 encoded float array)
    #[prost(bytes = "vec", tag = "2")]
    pub cr_result: ::prost::alloc::vec::Vec<u8>,
    /// Proofs for requested rows
    #[prost(message, repeated, tag = "3")]
    pub row_proofs: ::prost::alloc::vec::Vec<RowProof>,
    /// Response timestamp
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// Final verification result
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FreivaldsVerificationResult {
    /// Session ID that was verified
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    /// Whether Freivalds check passed
    #[prost(bool, tag = "2")]
    pub freivalds_valid: bool,
    /// Whether all spot checks passed
    #[prost(bool, tag = "3")]
    pub spot_checks_valid: bool,
    /// Number of spot checks performed
    #[prost(uint32, tag = "4")]
    pub spot_checks_performed: u32,
    /// Number of spot checks passed
    #[prost(uint32, tag = "5")]
    pub spot_checks_passed: u32,
    /// Overall verification passed
    #[prost(bool, tag = "6")]
    pub verified: bool,
    /// Verification message
    #[prost(string, tag = "7")]
    pub message: ::prost::alloc::string::String,
    /// Performance metrics
    #[prost(message, optional, tag = "8")]
    pub metrics: ::core::option::Option<PerformanceMetrics>,
    /// Result timestamp
    #[prost(message, optional, tag = "9")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// Execution metadata from miner
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecutionMetadata {
    /// GPU configuration used
    #[prost(message, repeated, tag = "1")]
    pub gpus: ::prost::alloc::vec::Vec<GpuInfo>,
    /// Total execution time in milliseconds
    #[prost(uint64, tag = "2")]
    pub execution_time_ms: u64,
    /// Total VRAM allocated in MB
    #[prost(uint64, tag = "3")]
    pub vram_allocated_mb: u64,
    /// Matrix multiplication kernel time in ms
    #[prost(uint64, tag = "4")]
    pub kernel_time_ms: u64,
    /// Merkle tree construction time in ms
    #[prost(uint64, tag = "5")]
    pub merkle_time_ms: u64,
}
/// GPU information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GpuInfo {
    /// GPU device ID
    #[prost(uint32, tag = "1")]
    pub device_id: u32,
    /// GPU model name
    #[prost(string, tag = "2")]
    pub model: ::prost::alloc::string::String,
    /// VRAM in MB
    #[prost(uint64, tag = "3")]
    pub vram_mb: u64,
    /// Number of SMs/CUs
    #[prost(uint32, tag = "4")]
    pub compute_units: u32,
}
/// Performance metrics for verification
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PerformanceMetrics {
    /// Freivalds verification time in ms
    #[prost(uint64, tag = "1")]
    pub freivalds_time_ms: u64,
    /// Spot check verification time in ms
    #[prost(uint64, tag = "2")]
    pub spot_check_time_ms: u64,
    /// Total verification time in ms
    #[prost(uint64, tag = "3")]
    pub total_time_ms: u64,
    /// Estimated computation saved (percentage)
    #[prost(double, tag = "4")]
    pub computation_saved_percent: f64,
}
/// Request to initiate a new challenge
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitiateChallengeRequest {
    /// Executor ID requesting the challenge
    #[prost(string, tag = "1")]
    pub executor_id: ::prost::alloc::string::String,
    /// Claimed GPU configuration
    #[prost(message, repeated, tag = "2")]
    pub claimed_gpus: ::prost::alloc::vec::Vec<GpuInfo>,
    /// Preferred matrix size (validator may adjust)
    #[prost(uint32, tag = "3")]
    pub preferred_n: u32,
}
/// Request to cancel a session
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelSessionRequest {
    /// Session ID to cancel
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    /// Reason for cancellation
    #[prost(string, tag = "2")]
    pub reason: ::prost::alloc::string::String,
}
/// Response to session cancellation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelSessionResponse {
    /// Whether cancellation succeeded
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Response message
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Combined challenge type for hybrid mode
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HybridGpuChallenge {
    /// Which mode to use
    #[prost(enumeration = "ChallengeMode", tag = "3")]
    pub mode: i32,
    /// Challenge type selector
    #[prost(oneof = "hybrid_gpu_challenge::Challenge", tags = "1, 2")]
    pub challenge: ::core::option::Option<hybrid_gpu_challenge::Challenge>,
}
/// Nested message and enum types in `HybridGpuChallenge`.
pub mod hybrid_gpu_challenge {
    /// Challenge type selector
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Challenge {
        /// Traditional symmetric challenge (defined in gpu_pow.proto)
        #[prost(message, tag = "1")]
        SymmetricChallenge(super::super::super::gpu_pow::v1::GpuPowChallenge),
        /// Freivalds asymmetric challenge
        #[prost(message, tag = "2")]
        FreivaldsChallenge(super::FreivaldsChallenge),
    }
}
/// Challenge mode selector
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChallengeMode {
    /// Unspecified mode
    ModeUnspecified = 0,
    /// Traditional symmetric verification
    ModeSymmetric = 1,
    /// Freivalds asymmetric verification
    ModeFreivalds = 2,
    /// Validator chooses based on resources
    ModeAuto = 3,
}
impl ChallengeMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ChallengeMode::ModeUnspecified => "MODE_UNSPECIFIED",
            ChallengeMode::ModeSymmetric => "MODE_SYMMETRIC",
            ChallengeMode::ModeFreivalds => "MODE_FREIVALDS",
            ChallengeMode::ModeAuto => "MODE_AUTO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MODE_UNSPECIFIED" => Some(Self::ModeUnspecified),
            "MODE_SYMMETRIC" => Some(Self::ModeSymmetric),
            "MODE_FREIVALDS" => Some(Self::ModeFreivalds),
            "MODE_AUTO" => Some(Self::ModeAuto),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod freivalds_gpu_pow_validator_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service definition for Freivalds GPU PoW
    #[derive(Debug, Clone)]
    pub struct FreivaldsGpuPowValidatorClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl FreivaldsGpuPowValidatorClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> FreivaldsGpuPowValidatorClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> FreivaldsGpuPowValidatorClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            FreivaldsGpuPowValidatorClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Phase 1: Request initial challenge (n, seed)
        pub async fn initiate_challenge(
            &mut self,
            request: impl tonic::IntoRequest<super::InitiateChallengeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FreivaldsChallenge>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.freivalds_gpu_pow.v1.FreivaldsGpuPowValidator/InitiateChallenge",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.freivalds_gpu_pow.v1.FreivaldsGpuPowValidator",
                        "InitiateChallenge",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Phase 2: Submit commitment (merkle root)
        pub async fn submit_commitment(
            &mut self,
            request: impl tonic::IntoRequest<super::CommitmentResponse>,
        ) -> std::result::Result<
            tonic::Response<super::FreivaldsVerification>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.freivalds_gpu_pow.v1.FreivaldsGpuPowValidator/SubmitCommitment",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.freivalds_gpu_pow.v1.FreivaldsGpuPowValidator",
                        "SubmitCommitment",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Phase 3: Submit response (C·r and row proofs)
        pub async fn submit_response(
            &mut self,
            request: impl tonic::IntoRequest<super::FreivaldsResponse>,
        ) -> std::result::Result<
            tonic::Response<super::FreivaldsVerificationResult>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.freivalds_gpu_pow.v1.FreivaldsGpuPowValidator/SubmitResponse",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.freivalds_gpu_pow.v1.FreivaldsGpuPowValidator",
                        "SubmitResponse",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Cancel an active session
        pub async fn cancel_session(
            &mut self,
            request: impl tonic::IntoRequest<super::CancelSessionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelSessionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/basilca.freivalds_gpu_pow.v1.FreivaldsGpuPowValidator/CancelSession",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "basilca.freivalds_gpu_pow.v1.FreivaldsGpuPowValidator",
                        "CancelSession",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod freivalds_gpu_pow_validator_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with FreivaldsGpuPowValidatorServer.
    #[async_trait]
    pub trait FreivaldsGpuPowValidator: Send + Sync + 'static {
        /// Phase 1: Request initial challenge (n, seed)
        async fn initiate_challenge(
            &self,
            request: tonic::Request<super::InitiateChallengeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FreivaldsChallenge>,
            tonic::Status,
        >;
        /// Phase 2: Submit commitment (merkle root)
        async fn submit_commitment(
            &self,
            request: tonic::Request<super::CommitmentResponse>,
        ) -> std::result::Result<
            tonic::Response<super::FreivaldsVerification>,
            tonic::Status,
        >;
        /// Phase 3: Submit response (C·r and row proofs)
        async fn submit_response(
            &self,
            request: tonic::Request<super::FreivaldsResponse>,
        ) -> std::result::Result<
            tonic::Response<super::FreivaldsVerificationResult>,
            tonic::Status,
        >;
        /// Cancel an active session
        async fn cancel_session(
            &self,
            request: tonic::Request<super::CancelSessionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelSessionResponse>,
            tonic::Status,
        >;
    }
    /// Service definition for Freivalds GPU PoW
    #[derive(Debug)]
    pub struct FreivaldsGpuPowValidatorServer<T: FreivaldsGpuPowValidator> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: FreivaldsGpuPowValidator> FreivaldsGpuPowValidatorServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for FreivaldsGpuPowValidatorServer<T>
    where
        T: FreivaldsGpuPowValidator,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/basilca.freivalds_gpu_pow.v1.FreivaldsGpuPowValidator/InitiateChallenge" => {
                    #[allow(non_camel_case_types)]
                    struct InitiateChallengeSvc<T: FreivaldsGpuPowValidator>(pub Arc<T>);
                    impl<
                        T: FreivaldsGpuPowValidator,
                    > tonic::server::UnaryService<super::InitiateChallengeRequest>
                    for InitiateChallengeSvc<T> {
                        type Response = super::FreivaldsChallenge;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InitiateChallengeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FreivaldsGpuPowValidator>::initiate_challenge(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = InitiateChallengeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.freivalds_gpu_pow.v1.FreivaldsGpuPowValidator/SubmitCommitment" => {
                    #[allow(non_camel_case_types)]
                    struct SubmitCommitmentSvc<T: FreivaldsGpuPowValidator>(pub Arc<T>);
                    impl<
                        T: FreivaldsGpuPowValidator,
                    > tonic::server::UnaryService<super::CommitmentResponse>
                    for SubmitCommitmentSvc<T> {
                        type Response = super::FreivaldsVerification;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CommitmentResponse>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FreivaldsGpuPowValidator>::submit_commitment(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SubmitCommitmentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.freivalds_gpu_pow.v1.FreivaldsGpuPowValidator/SubmitResponse" => {
                    #[allow(non_camel_case_types)]
                    struct SubmitResponseSvc<T: FreivaldsGpuPowValidator>(pub Arc<T>);
                    impl<
                        T: FreivaldsGpuPowValidator,
                    > tonic::server::UnaryService<super::FreivaldsResponse>
                    for SubmitResponseSvc<T> {
                        type Response = super::FreivaldsVerificationResult;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FreivaldsResponse>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FreivaldsGpuPowValidator>::submit_response(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SubmitResponseSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/basilca.freivalds_gpu_pow.v1.FreivaldsGpuPowValidator/CancelSession" => {
                    #[allow(non_camel_case_types)]
                    struct CancelSessionSvc<T: FreivaldsGpuPowValidator>(pub Arc<T>);
                    impl<
                        T: FreivaldsGpuPowValidator,
                    > tonic::server::UnaryService<super::CancelSessionRequest>
                    for CancelSessionSvc<T> {
                        type Response = super::CancelSessionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CancelSessionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FreivaldsGpuPowValidator>::cancel_session(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CancelSessionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: FreivaldsGpuPowValidator> Clone for FreivaldsGpuPowValidatorServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: FreivaldsGpuPowValidator> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: FreivaldsGpuPowValidator> tonic::server::NamedService
    for FreivaldsGpuPowValidatorServer<T> {
        const NAME: &'static str = "basilca.freivalds_gpu_pow.v1.FreivaldsGpuPowValidator";
    }
}
